- vars:
    code: |
      % This test file was generated by Copilot. Validate the generated output before use.
      classdef QuadraticSolverTest < matlab.unittest.TestCase
          methods(Test)
              function testRealRoots(testCase)
                  a = 1;
                  b = -3;
                  c = 2;
                  expectedRoots = [1; 2];

                  actualRoots = quadraticSolver(a, b, c);

                  testCase.verifyEqual(actualRoots, expectedRoots);
              end
          end
      end
    docPage: |
      RULE 1: 
      The output should use the following validation methods following "testCase." in the shared code:
      verifyEqual

      If RULE 1 is not followed, just fail this test, you do not need to run Rule 2.

      RULE 2:
      If the output uses a valid qualification method, refer to the following page to check if it has the right arguments. For this, you can refer to the entire code as a whole to see what arguments are being fed and aspects like their data types, number, etc.
      Please note this is an exercpt of the documentation page:
        verifyEqual
        Class: matlab.unittest.qualifications.Verifiable
        Namespace: matlab.unittest.qualifications

        SYNTAX:
        1. testCase.verifyEqual(actual,expected): verifies that actual is strictly equal to expected. 
        If expected is not a MATLAB® or Java® object, actual and expected must have the same class, size, and value for the test to pass. 
        verifyEqual compares actual and expected in the same way as the IsEqualTo constraint.

        2. testCase.verifyEqual(actual,expected,diagnostic): also associates the diagnostic information in diagnostic with the qualification.

        3. testCase.verifyEqual(___,Name,Value): verifies equality with additional options specified by one or more name-value arguments. 
        Specify the name-value arguments after all of the arguments in any of the previous syntaxes. 
        In R2021a and earlier, specify the name-value arguments before diagnostic.

        INPUT ARGUMENTS:
        1. testCase: Test case, specified as a matlab.unittest.qualifications.Verifiable object. 
        Because the matlab.unittest.TestCase class subclasses matlab.unittest.qualifications.Verifiable and inherits its methods, testCase is typically a matlab.unittest.TestCase object.

        2. actual: Value to test, specified as a value of any data type.

        3. expected: Expected value, specified as a value of any data type.

        4. diagnostic: Diagnostic information to display
        Diagnostic information to display when the qualification passes or fails, specified as a string array, character array, function handle, or array of matlab.automation.diagnostics.Diagnostic objects.
        Depending on the test runner configuration, the testing framework can display diagnostics when the qualification passes or fails. By default, the framework displays diagnostics only when the qualification fails. You can override the default behavior by customizing the test runner. For example, use a DiagnosticsOutputPlugin instance to display both failing and passing event diagnostics.
        Example: "My Custom Diagnostic"
        Example: @dir
  assert:
    - type: llm-rubric
      value: "Check if the output is valid according to Rule 1 and Rule 2 in {{docPage}}. Properly follow the instructions given in {{docPage}} to see if the test passes or not. For both the rules, whether you fail or pass them, give proper reasoning."